library(mapdeck)
library(sf)
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania.gpkg')
key <- "pk.eyJ1IjoidXRqaW1teXgiLCJhIjoiY2tnMmI1OWRpMDZsdDJxb2Y4MjdnZmxpMyJ9.ImwwUvDQpod7-B0YnIUytw"
mapdeck(token = key)
mapdeck(style = mapdeck_style("dark")) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
basins
mapdeck() %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
key <- "pk.eyJ1IjoidXRqaW1teXgiLCJhIjoiY2tnMmI1OWRpMDZsdDJxb2Y4MjdnZmxpMyJ9.ImwwUvDQpod7-B0YnIUytw"
mapdeck(token = key)
mapdeck() %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania.shp')
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania.gpkg')
key <- "pk.eyJ1IjoidXRqaW1teXgiLCJhIjoiY2tnMmI1OWRpMDZsdDJxb2Y4MjdnZmxpMyJ9.ImwwUvDQpod7-B0YnIUytw"
mapdeck(token = key)
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
library(geojsonsf)
sf <- geojson_sf("https://symbolixau.github.io/data/geojson/SA2_2016_VIC.json")
sf$e <- sf$AREASQKM16 * 10
mapdeck(token = key, style = mapdeck_style("dark")) %>%
add_polygon(
data = sf[ data.table::`%like%`(sf$SA4_NAME16, "Melbourne"), ]
, layer = "polygon_layer"
, fill_colour = "SA2_NAME16"
, elevation = "e"
)
install.packages('data.table')
mapdeck(token = key, style = mapdeck_style("dark")) %>%
add_polygon(
data = sf[ data.table::`%like%`(sf$SA4_NAME16, "Melbourne"), ]
, layer = "polygon_layer"
, fill_colour = "SA2_NAME16"
, elevation = "e"
)
library(geojsonsf)
basins <- sf_geojson(basins)
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania.gpkg')
basins <- geojson_sf(basins)
sf <- geojson_sf("https://symbolixau.github.io/data/geojson/SA2_2016_VIC.json")
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania.gpkg') %>% st_transform(sf)
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania.gpkg') %>% st_transform(st_crs(sf))
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
mapdeck(token = key, style = mapdeck_style("dark")) %>%
add_polygon(
data = sf[ data.table::`%like%`(sf$SA4_NAME16, "Melbourne"), ]
, layer = "polygon_layer"
, fill_colour = "SA2_NAME16"
, elevation = "e"
)
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
world <- load('World')
library(rnaturalearth)
install.packages('rnaturalearth')
library(rnaturalearth)
world <- load('World')
world <- data('World')
library(tmap)
install.packages('tmap')
library(tmap)
world <- data('World')
mapdeck(token = key) %>%
add_polygon(
data = world
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
world
data('World')
mapdeck(token = key) %>%
add_polygon(
data = World
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
mapdeck(token = key) %>%
add_polygon(
data = World
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania.gpkg') %>% st_transform(st_crs(world))
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania.gpkg') %>% st_transform(st_crs(World))
mapdeck(token = key) %>%
add_polygon(
data = World
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania.shp') %>% st_transform(st_crs(World))
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
gad <- st_read('data/AFG_adm/AFT_adm0.shp')
gad <- st_read('data/AFG_adm/AFG_adm0.shp')
mapdeck(token = key) %>%
add_polygon(
data = gad
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania_v2.shp')
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania_v2.shp')
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
basins <- st_read('data/hybas_au/hybas_au_lev07_v1c.shp')
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
basins <- st_read('data/hybas_au/hybas_au_lev07_v1c.shp')
gad <- st_read('data/AFG_adm/AFG_adm0.shp')
basins <- st_read('data/hybas_au/hybas_au_lev07_v1c.shp')
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
library(tmap)
qtm(basins)
basins <- st_read('data/hybas_au/hybas_au_lev07_v1c.shp')
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
mapdeck(token = key) %>%
add_polygon(
data = gad
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
basins <- st_read('data/hybas_au/hybas_au_lev07_v1c.shp')
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
qtm(basins)
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania.gpkg') %>%
gad <- st_read('data/AFG_adm/AFG_adm0.shp')
basins <- st_read('data/BasinATLAS_v10_lev08_seasia_oceania.gpkg')
key <- "pk.eyJ1IjoidXRqaW1teXgiLCJhIjoiY2tnMmI1OWRpMDZsdDJxb2Y4MjdnZmxpMyJ9.ImwwUvDQpod7-B0YnIUytw"
mapdeck(token = key)
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
tmap_mode('view')
qtm(basins)
basins <- st_read('data/hybas_au/hybas_au_lev07_v1c.shp') %>% st_make_valid()
key <- "pk.eyJ1IjoidXRqaW1teXgiLCJhIjoiY2tnMmI1OWRpMDZsdDJxb2Y4MjdnZmxpMyJ9.ImwwUvDQpod7-B0YnIUytw"
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
st_make_valid()
tmap_mode('view')
qtm(basins)
basins <- st_read('data/hybas_au/hybas_au_lev07_v1c.shp') %>% st_make_valid() %>% st_wrap_dateline()
qtm(basins)
basins <- st_write('data/hydrobasins_lev07_aus.gpkg')
st_write(basins, 'data/hydrobasins_lev07_aus.gpkg')
basins <- st_read('data/hydrobasins_lev07_aus.gpkg')
#key <- "pk.eyJ1IjoidXRqaW1teXgiLCJhIjoiY2tnMmI1OWRpMDZsdDJxb2Y4MjdnZmxpMyJ9.ImwwUvDQpod7-B0YnIUytw"
key <- 'pk.eyJ1IjoiY2hyaXN0aW5hYnVlbG93IiwiYSI6ImNreHNqYjJtODMxbHcybnBuejVpOXl2YnYifQ.vX0OuLpDzU1vSWKs-L4Nhw'
mapdeck(token = key) %>%
add_polygon(
data = basins
, layer = "polygon_layer"
#, fill_colour = "SA2_NAME16"
)
xaringan:::inf_mr()
shinyApp(ui, server)
library(shiny)
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
library(shiny)
library(tmap)
data('World')
qtm(World, 'name')
qtm(filter(World, name == Canada))
qtm(filter(World, name == 'Canada'))
library(dplyr)
qtm(filter(World, name == 'Canada'))
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
xaringan:::inf_mr()
install.packages('rnaturalearth')
library(sf)
library(rnaturalearth)
library(shiny)
library(leaflet)
library(rnaturalearth)
library(shiny)
aus <- ne_countries(country == 'Australia')
aus <- ne_countries(country == 'australia')
aus <- ne_countries(country == 'united kingdom')
aus <- ne_countries(country = 'australia')
plot(aus[,1])
aus
aus <- st_as_sf(ne_countries(country = 'australia'))
aus
m <- leaflet()
m
m <- leaflet() %>%
addTiles()
m
lakes110 <- ne_download(type = 'people')
#rivers
rivers50 <- ne_download(scale = 50, type = 'rivers_lake_centerlines', category = 'physical')
install.packages(c("rgdal","sf"), "https://mac.R-project.org")
install.packages(c("rgdal", "sf"), "https://mac.R-project.org")
Yes
install.packages(c("rgdal","sf"), "https://mac.R-project.org")
library(sf)
library(terra)
library(rgdal)
install.packages('rgdal')
install.packages("rgdal", type="source", repos="http://R-Forge.R-project.org", configure.args=c('--with-gdal-config=/opt/local/bin/gdal-config'))
library(sf)
install.packages("rgdal")
library raster
library(raster)
library(sf)
library(terra)
library(sf)
install.packages("rgdal", type="binary", repos="http://R-Forge.R-project.org", configure.args=c('--with-gdal-config=/opt/local/bin/gdal-config'))
install.packages("rgdal", type="source", repos="http://R-Forge.R-project.org", configure.args=c('--with-gdal-config=/opt/local/bin/gdal-config'))
install.packages("rgdal", "https://mac.R-project.org")
install.packages("rgdal", type="source", repos="https://mac.R-project.org", configure.args=c('--with-gdal-config=/opt/local/bin/gdal-config'))
install.packages("rgdal",configure.args = "--with-gdal-config=/opt/homebrew/opt/gdal/bin/gdal-config")
install.packages("rgdal",configure.args = "--with-gdal-config=/opt/homebrew/bin/gdal-config", type = "source")
install.packages("rgdal",configure.args = "--with-gdal-config=/opt/homebrew/bin/gdal-config", type = "source")
install.packages("rgdal",configure.args = "--with-gdal-config=/opt/homebrew/bin/gdal-config")
library(rgdal)
library(sf)
library(leaflet) # javascript library for interactive maps
library(rnaturalearth)
library(shiny)
m <- leaflet() %>%
addTiles()
#rivers
rivers50 <- ne_download(scale = 50, type = 'rivers_lake_centerlines', category = 'physical')
library(shiny); runApp('leaflet-app.R')
country <- sort(unique(st_drop_geometry(pop)$SOV0NAME))
pop <- st_as_sf(ne_download(scale = 50, type = 'populated_places', category = 'cultural'))
country <- sort(unique(st_drop_geometry(pop)$SOV0NAME))
country
xaringan:::inf_mr()
?shinyApp
library(shiny)
?shinyApp
?rnorm
hist(rnorm(25))
runApp('~/Desktop/hist-app.R')
library(tmap)
?data
data('World')
qtm(World)
tmap_mode('view')
qtm(World)
qtm(World, 'name')
View(World)
output$map <- qtm(World)
?tmapOutput
runApp('~/Desktop/hist-app.R')
?c
head(World)
str(World)
runApp('~/Desktop/hist-app.R')
library(shiny); runApp('002_leaflet-app.R')
filter(pop, SOV0NAME == 'Angola')
pop <- st_as_sf(ne_download(scale = 50, type = 'populated_places', category = 'cultural'))
filter(pop, SOV0NAME == 'Angola')
filter(pop, SOV0NAME == 'Barbados')
d <- filter(pop, SOV0NAME == 'Barbados')
st_bbox(d)
library(dplyr)
p <- pop %>% select(name, SOV0NAME, POP_MAX)
head(pop)
p <- pop %>% select(NAME, SOV0NAME, POP_MAX)
st_write(p, 'population.gpkg', overwrite = T, append = F)
runApp('002_leaflet-app.R')
filter(pop, SOV0NAME == 'Austria')
st_bbox(filter(pop, SOV0NAME == 'Austria'))
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
library(shiny); runApp('002_leaflet-app.R')
?eventReactive
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
?observeEvent
?reactive
?reactiveValues
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
library(sf)
library(dplyr)
library(leaflet) # javascript library for interactive maps
m <- leaflet() %>%
addTiles()
m
pop <- st_read('data/population.gpkg')
reefs <- st_read('data/reefs.gpkg')
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pop,
weight = 0.1,
radius = ~log(as.numeric(pop$POP_MAX)/1e5)) %>%
addPolygons(data = reefs,
weight = 0.7,
color = 'red')
m
pop_up <- st_drop_geometry(pop) %>%
mutate(popup = paste0("<span style='font-size: 120%'><strong>", NAME ,"</strong></span><br/>",
"<strong>", "Country: ", "</strong>", SOV0NAME,
"<br/>",
"<strong>", "Max population size: ", "</strong>", POP_MAX)) %>%
pull(popup)
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pop,
weight = 0.1,
radius = ~log(as.numeric(pop$POP_MAX)/1e5),
popup = pop_up) %>%
addPolygons(data = reefs,
weight = 0.7,
color = 'red')
m
library(shiny); runApp('002_leaflet-app.R')
hist(rnorm(25))
runApp('example.R')
library(tmap)
data("World")
qtm(World)
tmap_mode('view')
qtm(World)
qtm(World, 'name')
runApp('example.R')
runApp('example.R')
c('Global', World$name)
c('Global', as.charcter(World$name)
)
c('Global', as.character(World$name)
)
runApp('example.R')
runApp('example.R')
library(sf)
library(dplyr)
library(leaflet) # javascript library for interactive maps
leaflet()
leaflet() %>%
addTiles()
pop <- st_read('data/population.gpkg')
reefs <- st_read('data/reefs.gpkg')
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pop,
weight = 0.5)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pop,
weight = 0.5,
radius = ~log(as.numeric(pop$POP_MAX)/1e5))
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pop,
weight = 0.5,
radius = ~log(as.numeric(pop$POP_MAX)/1e5)) %>%
addPolygons(data = reefs,
colour = 'red',
weight = 0.5)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pop,
weight = 0.5,
radius = ~log(as.numeric(pop$POP_MAX)/1e5)) %>%
addPolygons(data = reefs,
color = 'red',
weight = 0.5)
head(pop)
pop_up <- st_drop_geometry(pop) %>%
mutate(popup = paste0("<span style='font-size: 120%'><strong>", NAME ,"</strong></span><br/>",
"<strong>", "Country: ", "</strong>", SOV0NAME,
"<br/>",
"<strong>", "Max population size: ", "</strong>", POP_MAX)) %>%
pull(popup)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pop,
weight = 0.5,
radius = ~log(as.numeric(pop$POP_MAX)/1e5),
popup = pop_up) %>%
addPolygons(data = reefs,
color = 'red',
weight = 0.5)
library(shiny)
library(sf)
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
runApp('002_leaflet-app.R')
?absolutePanel
runApp('002_leaflet-app.R')
library(shiny); runApp('leaflet-example.R')
?observe
library(leaflet)
?addPolygons
?observe
?flyToBounds
?usethis::use_github_pages
usethis::use_github_pages(branch = 'master')
usethis::use_github_pages(branch = 'master')
usethis::use_github_pages(branch = 'master')
